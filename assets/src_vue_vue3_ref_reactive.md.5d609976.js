import{_ as p,C as c,o as t,c as r,k as s,H as l,w as e,a as n,Q as o}from"./chunks/framework.a18e13b4.js";const Z=JSON.parse('{"title":"ref 和 reactive","description":"","frontmatter":{},"headers":[],"relativePath":"src/vue/vue3/ref_reactive.md","filePath":"src/vue/vue3/ref_reactive.md","lastUpdated":1693984645000}'),i={name:"src/vue/vue3/ref_reactive.md"},d=o('<h1 id="ref-和-reactive" tabindex="-1">ref 和 reactive <a class="header-anchor" href="#ref-和-reactive" aria-label="Permalink to &quot;ref 和 reactive&quot;">​</a></h1><h2 id="_1-ref-和-reactive-的区别" tabindex="-1">1.ref 和 reactive 的区别 <a class="header-anchor" href="#_1-ref-和-reactive-的区别" aria-label="Permalink to &quot;1.ref 和 reactive 的区别&quot;">​</a></h2><p>在 Vue3 中<code>ref</code>和<code>reactive</code>是用于创建响应式数据的方法，两个 API 设计的的是为了提供更灵活的响应式数据处理方式，但它们有一些关键的区别。</p><h4 id="基本米型与对象类型" tabindex="-1">基本米型与对象类型 <a class="header-anchor" href="#基本米型与对象类型" aria-label="Permalink to &quot;基本米型与对象类型&quot;">​</a></h4>',4),E=s("b",null,"ref",-1),y=s("code",null,"Number",-1),u=s("code",null,"string",-1),_=s("code",null,"Boolean",-1),h=s("code",null,"ref",-1),b=s("code",null,"reactive",-1),f=s("b",null,"reactive",-1),v=s("h4",{id:"模板中的使用",tabindex:"-1"},[n("模板中的使用 "),s("a",{class:"header-anchor",href:"#模板中的使用","aria-label":'Permalink to "模板中的使用"'},"​")],-1),m=s("b",null,"ref",-1),F=s("code",null,".value",-1),g=s("b",null,"reactive",-1),C=s("code",null,".value",-1),B=s("h4",{id:"解构",tabindex:"-1"},[n("解构 "),s("a",{class:"header-anchor",href:"#解构","aria-label":'Permalink to "解构"'},"​")],-1),A=s("b",null,"ref",-1),D=s("b",null,"reactive",-1),k=s("code",null,"toRefs",-1),q=s("code",null,"shallowRefs",-1),P=s("h4",{id:"返回类型",tabindex:"-1"},[n("返回类型 "),s("a",{class:"header-anchor",href:"#返回类型","aria-label":'Permalink to "返回类型"'},"​")],-1),x=s("b",null,"ref",-1),V=s("code",null,".value",-1),T=s("b",null,"reactive",-1),z=s("h4",{id:"内部实现",tabindex:"-1"},[n("内部实现 "),s("a",{class:"header-anchor",href:"#内部实现","aria-label":'Permalink to "内部实现"'},"​")],-1),H=s("b",null,"ref",-1),N=s("code",null,"reactive",-1),w=s("code",null,"ref",-1),S=s("code",null,".value",-1),j=s("code",null,"reactive",-1),R=s("h4",{id:"转换为普通对象",tabindex:"-1"},[n("转换为普通对象 "),s("a",{class:"header-anchor",href:"#转换为普通对象","aria-label":'Permalink to "转换为普通对象"'},"​")],-1),I=s("b",null,"ref",-1),$=s("code",null,".value",-1),J=s("b",null,"reactive",-1),O=s("code",null,"toRaw",-1),Q=o(`<p><strong>示例</strong>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, reactive } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//使用 ref</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value);   </span><span style="color:#6A737D;">//0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//使用 reactive</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    message:</span><span style="color:#9ECBFF;">&#39;Hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.count): </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.message); </span><span style="color:#6A737D;">// Hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, reactive } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//使用 ref</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count.value);   </span><span style="color:#6A737D;">//0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//使用 reactive</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    message:</span><span style="color:#032F62;">&#39;Hello&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(state.count): </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(state.message); </span><span style="color:#6A737D;">// Hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>总之，选择<code>ref</code>还是<code>reactive</code>取决于具体的使用场景。对于基本类型，<code>ref</code>更为简单;而对于对象和数组，<code>reactive</code>提供了更直观的语法。</p><h2 id="_2-ref-和-reactive-的使用场景" tabindex="-1">2.ref 和 reactive 的使用场景 <a class="header-anchor" href="#_2-ref-和-reactive-的使用场景" aria-label="Permalink to &quot;2.ref 和 reactive 的使用场景&quot;">​</a></h2><p><strong><em><code>ref</code>场景</em></strong>：当你只需要一个响应式的基本类型 (如<code>Number</code>，<code>string</code>，<code>Boolean</code>) 时。</p><p><strong>示例</strong>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">( Hello Vue </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">&#39;)</span><span style="color:#FDAEB7;font-style:italic;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">( Hello Vue </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">&#39;)</span><span style="color:#B31D28;font-style:italic;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>优势</strong>：</p><ul><li>对于基本类型<code>ref</code>提供了一个简单的方式来使其成为响应式的。</li><li><code>ref</code>可以在任何地方使用，不仅仅是在<code>setup</code>函数中。</li><li>它可以安全地解构，因为上是一个包袭对象。</li></ul><br><p><strong><em><code>reactive</code>场景</em></strong>：当一个对象，并希望该对象的所有属性都是响应式的。</p><p><strong>示例</strong>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  message: </span><span style="color:#9ECBFF;">&quot;Hello Vue 3&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  user: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    age: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  message: </span><span style="color:#032F62;">&quot;Hello Vue 3&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  user: {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>优势</strong>：</p><ul><li>对于对象，<code>reactive</code>提供了一个直观的方式来使其所有属性都成为响应式的，而无需为每个属性使用<code>ref</code>。</li><li>在模板和其他地方，你可以直接访问对象的属性，而不需要使用<code>.value</code>。</li><li>它提供了更深层次的响应性，即使对象的属性是另一个对象或数组，它们也会自动变为响应式的。</li></ul>`,15);function U(G,K,L,M,W,X){const a=c("font");return t(),r("div",null,[d,s("ul",null,[s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[E]),_:1}),n("：主要用于基本类型(如"),y,n("，"),u,n("，"),_,n("等)。当你传递一个对象给"),h,n("，它实际上在内部使用"),b,n("。")]),s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[f]),_:1}),n("：用于对象或数组。它会将对象的每个属性都转换为响应式的。")])]),v,s("ul",null,[s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[m]),_:1}),n("：在模板中使用时，需要"),F,n("来访问其值。")]),s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[g]),_:1}),n("：在模板中可以直接访问其属性，无需"),C,n("。")])]),B,s("ul",null,[s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[A]),_:1}),n("：可以安全地解构，因为它是一个包装对象。")]),s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[D]),_:1}),n("：解构可能会导致失去响应性，除非使用 Vue 提供的"),k,n("或"),q,n("函数。")])]),P,s("ul",null,[s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[x]),_:1}),n("：返回一个响应式引用对象，具有一个"),V,n("属性指向原始值。")]),s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[T]),_:1}),n("：返回原始对象的响应式版本。")])]),z,s("ul",null,[s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[H]),_:1}),n("：是基于"),N,n("的。当创建一个"),w,n("，实际上是在创建一个包含单一属性"),S,n("的"),j,n("对象。")])]),R,s("ul",null,[s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[I]),_:1}),n("：使用 toRaw 或直接"),$,n("可以获取其原始值。")]),s("li",null,[l(a,{size:"4",color:"#7379f4"},{default:e(()=>[J]),_:1}),n("：使用"),O,n("可以获取其原始对象。")])]),Q])}const ss=p(i,[["render",U]]);export{Z as __pageData,ss as default};

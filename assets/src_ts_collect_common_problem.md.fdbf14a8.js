import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.853a6672.js";const o="/article/assets/不存在属性1.11ceb13d.png",l="/article/assets/不存在属性2.b74b55cf.png",p="/article/assets/可能为未定义1.d59c6ab5.png",t="/article/assets/可能为未定义2.ec325ad3.png",v=JSON.parse('{"title":"TS 常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"src/ts_collect/common_problem.md","filePath":"src/ts_collect/common_problem.md","lastUpdated":1698458145000}'),c={name:"src/ts_collect/common_problem.md"},r=e('<h1 id="ts-常见问题" tabindex="-1">TS 常见问题 <a class="header-anchor" href="#ts-常见问题" aria-label="Permalink to &quot;TS 常见问题&quot;">​</a></h1><h2 id="_1-类型-never-上不存在属性-xxx" tabindex="-1">1.类型“never”上不存在属性“xxx” <a class="header-anchor" href="#_1-类型-never-上不存在属性-xxx" aria-label="Permalink to &quot;1.类型“never”上不存在属性“xxx”&quot;">​</a></h2><p><code>vue3</code> + <code>ts</code> 语法报错：类型<code>never</code>上不存在属性<code>name</code><br> 错误代码：</p><p><img src="'+o+'" alt="image"><img src="'+l+'" alt="image"></p><p>修改：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">templateLists</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">([] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">[])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">templateLists</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">([] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-xxx-可能为未定义" tabindex="-1">2.xxx 可能为未定义 <a class="header-anchor" href="#_2-xxx-可能为未定义" aria-label="Permalink to &quot;2.xxx 可能为未定义&quot;">​</a></h2><p><img src="'+p+'" alt="image"> 加个问号 <img src="'+t+`" alt="image"></p><h2 id="_3-引用-window-自定义变量以及-ts-在-window-上自定义变量数据类型报错的解决方案" tabindex="-1">3.引用 window 自定义变量以及 ts 在 window 上自定义变量数据类型报错的解决方案 <a class="header-anchor" href="#_3-引用-window-自定义变量以及-ts-在-window-上自定义变量数据类型报错的解决方案" aria-label="Permalink to &quot;3.引用 window 自定义变量以及 ts 在 window 上自定义变量数据类型报错的解决方案&quot;">​</a></h2><h3 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h3><p>举个例子，在<code>TypeScript</code>中，当我们需要给 window 对象添加全局变量（如 testName），或者需要使用 window 下自定义创建的变量（以 testName 为例）。会出现以下 ts 报错：类型“Window &amp; typeof globalThis”上不存在属性“testName”。产生类型报错的原因是因为 window 数据类型定义如下：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> window</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Window</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> globalThis</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> window</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Window</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> globalThis</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>1、增加自定义属性声明，在类型声明文件<code>typings.d.ts</code>中，增加如下声明</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Window</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">testName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Window</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">testName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2、将 window 类型强制转换为 any</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(window </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">).testName</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(window </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">).testName</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、使用方括号</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window[</span><span style="color:#9ECBFF;">&#39;testName&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window[</span><span style="color:#032F62;">&#39;testName&#39;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,19),i=[r];function d(y,E,m,h,b,u){return a(),n("div",null,i)}const _=s(c,[["render",d]]);export{v as __pageData,_ as default};
